decimal

( load resources into vram )
gfx_ball vram_obj 32 cmove
pal_ball1 mem_pal_obj 32 cmove
pal_ball2 mem_pal_obj 32 + 32 cmove
pal_ball3 mem_pal_obj 64 + 32 cmove

( ball sprites )
0 sprite first_ball
1 sprite second_ball
2 sprite third_ball

( assign palettes )
0 first_ball spal!
1 second_ball spal!
2 third_ball spal!

( structure holding ball direction )
: direction create 2 cells allot ;
: d>dx ;
: d>dy cell+ ;

direction first_ball_dir
direction second_ball_dir
direction third_ball_dir

: init_direction >r r@ d>dy ! r> d>dx ! ; ( dx dy pos -- )
: init_position >r r@ sy! r> sx! ; ( x y spr -- )

: invert_dx d>dx dup @ negate swap ! ; ( dir -- )
: invert_dy d>dy dup @ negate swap ! ; ( dir -- )

: test_north sy@ 0= if invert_dy else drop then ; ( dir spr -- )
: test_south sy@ 152 = if invert_dy else drop then ; ( dir spr -- )
: test_west sx@ 0= if invert_dx else drop then ; ( dir spr -- )
: test_east sx@ 232 = if invert_dx else drop then ; ( dir spr -- )

: test_bounds 2dup test_north 2dup test_south 2dup test_west test_east ; ( dir spr -- )

: move_x swap d>dx @ over sx@ + swap sx! ; ( dir spr -- )
: move_y swap d>dy @ over sy@ + swap sy! ; ( dir spr -- )

: move 2dup move_x move_y ; ( dir spr -- )

: demo
  1 1 first_ball_dir init_direction  15 15 first_ball init_position
  1 -1 second_ball_dir init_direction  180 98 second_ball init_position
  -1 1 third_ball_dir init_direction  230 140 third_ball init_position
  1024
  ." demo started, " dup . ." cycles to go" cr
  1 do
    i 255 and 0= if
      ." ..." i .
    then
    first_ball_dir first_ball 2dup move test_bounds
    second_ball_dir second_ball 2dup move test_bounds
    third_ball_dir third_ball 2dup move test_bounds
    vsync
  loop
  ." done." cr
; ( -- )

demo
